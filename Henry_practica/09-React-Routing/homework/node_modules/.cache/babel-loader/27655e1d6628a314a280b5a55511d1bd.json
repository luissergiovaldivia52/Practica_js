{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sofia\\\\Documents\\\\Cursos_plc\\\\Full Stack Development\\\\FT-M2\\\\09-React-Routing\\\\homework\\\\src\\\\containers\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport About from './About.jsx';\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert('Ciudad no encontrada');\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/\",\n    render: () => React.createElement(Nav, {\n      onSearch: onSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/about\",\n    component: About,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Cards, {\n    cities: cities,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Sofia/Documents/Cursos_plc/Full Stack Development/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","About","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,MAAM,GAAG,kCAAf;;AAEA,SAASC,GAAT,GAAe;AACd,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AACA,WAASQ,OAAT,CAAiBC,EAAjB,EAAqB;AACpBF,IAAAA,SAAS,CAAEG,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAkBC,CAAD,IAAOA,CAAC,CAACH,EAAF,IAAQA,EAAhC,CAAhB,CAAT;AACA;;AACD,WAASI,QAAT,CAAkBC,MAAlB,EAA0B;AACzB;AACAC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASV,MAAO,EAA5E,CAAL,CACEY,IADF,CACQC,CAAD,IAAOA,CAAC,CAACC,IAAF,EADd,EAEEF,IAFF,CAEQG,OAAD,IAAa;AAClB,UAAIA,OAAO,CAACC,IAAR,KAAiBC,SAArB,EAAgC;AAC/B,cAAMP,MAAM,GAAG;AACdQ,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADS;AAEdC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFS;AAGdC,UAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHV;AAIdrB,UAAAA,EAAE,EAAEU,OAAO,CAACV,EAJE;AAKdsB,UAAAA,IAAI,EAAEZ,OAAO,CAACY,IAAR,CAAaC,KALL;AAMdC,UAAAA,IAAI,EAAEd,OAAO,CAACC,IAAR,CAAaa,IANL;AAOdC,UAAAA,IAAI,EAAEf,OAAO,CAACe,IAPA;AAQdL,UAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARd;AASde,UAAAA,MAAM,EAAEhB,OAAO,CAACgB,MAAR,CAAeC,GATT;AAUdC,UAAAA,OAAO,EAAElB,OAAO,CAACmB,KAAR,CAAcC,GAVT;AAWdC,UAAAA,QAAQ,EAAErB,OAAO,CAACmB,KAAR,CAAcG;AAXV,SAAf;AAaAlC,QAAAA,SAAS,CAAEG,SAAD,IAAe,CAAE,GAAGA,SAAL,EAAgBI,MAAhB,CAAhB,CAAT;AACA,OAfD,MAeO;AACN4B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD,KArBF;AAsBA;;AACD,WAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC3B,QAAI9B,MAAM,GAAGR,MAAM,CAACK,MAAP,CAAeC,CAAD,IAAOA,CAAC,CAACH,EAAF,IAAQoC,QAAQ,CAACD,QAAD,CAArC,CAAb;;AACA,QAAI9B,MAAM,CAACgC,MAAP,GAAgB,CAApB,EAAuB;AACtB,aAAOhC,MAAM,CAAC,CAAD,CAAb;AACA,KAFD,MAEO;AACN,aAAO,IAAP;AACA;AACD;;AACD,SACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,MAAM,EAAE,MAAM,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAED,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEV,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEG,MAAf;AAAuB,IAAA,OAAO,EAAEE,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAJD,EAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPD,CADD;AAWA;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport Nav from '../components/Nav.jsx';\r\nimport Cards from '../components/Cards.jsx';\r\nimport About from './About.jsx'\r\n\r\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\r\n\r\nfunction App() {\r\n\tconst [ cities, setCities ] = useState([]);\r\n\tfunction onClose(id) {\r\n\t\tsetCities((oldCities) => oldCities.filter((c) => c.id != id));\r\n\t}\r\n\tfunction onSearch(ciudad) {\r\n\t\t//Llamado a la API del clima\r\n\t\tfetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\r\n\t\t\t.then((r) => r.json())\r\n\t\t\t.then((recurso) => {\r\n\t\t\t\tif (recurso.main !== undefined) {\r\n\t\t\t\t\tconst ciudad = {\r\n\t\t\t\t\t\tmin: Math.round(recurso.main.temp_min),\r\n\t\t\t\t\t\tmax: Math.round(recurso.main.temp_max),\r\n\t\t\t\t\t\timg: recurso.weather[0].icon,\r\n\t\t\t\t\t\tid: recurso.id,\r\n\t\t\t\t\t\twind: recurso.wind.speed,\r\n\t\t\t\t\t\ttemp: recurso.main.temp,\r\n\t\t\t\t\t\tname: recurso.name,\r\n\t\t\t\t\t\tweather: recurso.weather[0].main,\r\n\t\t\t\t\t\tclouds: recurso.clouds.all,\r\n\t\t\t\t\t\tlatitud: recurso.coord.lat,\r\n\t\t\t\t\t\tlongitud: recurso.coord.lon\r\n\t\t\t\t\t};\r\n\t\t\t\t\tsetCities((oldCities) => [ ...oldCities, ciudad ]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert('Ciudad no encontrada');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\tfunction onFilter(ciudadId) {\r\n\t\tlet ciudad = cities.filter((c) => c.id == parseInt(ciudadId));\r\n\t\tif (ciudad.length > 0) {\r\n\t\t\treturn ciudad[0];\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Route path=\"/\" render={() => <Nav onSearch={onSearch} />} />\r\n\t\t\t<Route path=\"/about\" component={About} />\r\n\t\t\t{/* <Nav onSearch={onSearch}/> */}\r\n\t\t\t<div>\r\n\t\t\t\t<Cards cities={cities} onClose={onClose} />\r\n\t\t\t</div>\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}