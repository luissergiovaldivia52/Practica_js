{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sofia\\\\Documents\\\\Cursos_plc\\\\Practica_js\\\\Henry_practica\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cards from './components/Cards';\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\nexport default function App() {\n  const [cities, setCities] = React.useState([]);\n\n  function onSearch(ciudad) {\n    //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n    //pero de momento agregaremos una ciudad por default para ver que funcione\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    onSearch: onSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Cards, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/Sofia/Documents/Cursos_plc/Practica_js/Henry_practica/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","useState","Nav","Cards","apiKey","App","cities","setCities","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","onClose","filter","c"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,MAAM,GAAE,kCAAd;AAGA,eAAe,SAASC,GAAT,GAAe;AAE5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACC,QAAN,CAAe,EAAf,CAA5B;;AAEA,WAASO,QAAT,CAAkBC,MAAlB,EAA0B;AACxB;AACA;AACAC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASL,MAAO,eAA5E,CAAL,CACGO,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,IAAR,KAAiBC,SAArB,EAAgC;AAC9B,cAAMP,MAAM,GAAG;AACbQ,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbC,UAAAA,EAAE,EAAEZ,OAAO,CAACY,EAJC;AAKbC,UAAAA,IAAI,EAAEb,OAAO,CAACa,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEf,OAAO,CAACC,IAAR,CAAac,IANN;AAObC,UAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAPD;AAQbN,UAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARf;AASbgB,UAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAEnB,OAAO,CAACoB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAEtB,OAAO,CAACoB,KAAR,CAAcG;AAXX,SAAf;AAcA9B,QAAAA,SAAS,CAAC+B,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe7B,MAAf,CAAd,CAAT;AACD,OAhBD,MAgBO;AACL8B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,KAtBH;AAuBD;;AACA,WAASC,OAAT,CAAiBd,EAAjB,EAAqB;AAClBnB,IAAAA,SAAS,CAAC+B,SAAS,IAAIA,SAAS,CAACG,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAAChB,EAAF,IAAQA,EAA9B,CAAd,CAAT;AACD;;AACH,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAElB,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Nav from './components/Nav';\r\nimport Cards from './components/Cards';\r\n\r\nconst apiKey= '4ae2636d8dfbdc3044bede63951a019b';\r\n  \r\n\r\nexport default function App() {\r\n\r\n  const [cities, setCities] = React.useState([])\r\n\r\n  function onSearch(ciudad) {\r\n    //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\r\n    //pero de momento agregaremos una ciudad por default para ver que funcione\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main !== undefined) {\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n    \r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad])\r\n        } else {\r\n          alert(\"Ciudad no encontrada\")\r\n        }\r\n      });\r\n  }\r\n   function onClose(id) {\r\n      setCities(oldCities => oldCities.filter(c => c.id != id));\r\n    }\r\n  return (\r\n    <div className=\"App\">\r\n      { /* Tu código acá: */}\r\n      <Nav onSearch={onSearch} />\r\n      <Cards/>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}